{
	// Place your clover-admin-vue workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  "vue template": {
    "scope": "vue",
    "prefix": "vue template clover",
    "body": [
      "<template>",
      "  <div class=\"h-full\">",
      "    $0",
      "  </div>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "defineOptions({ name: \"$1\" });",
      "</script>",
      "",
      "<style lang=\"less\" scoped>",
      "</style>"
    ],
    "description": "clover's vue3 template"
  },
  "vue template and el-card": {
    "scope": "vue",
    "prefix": "vue template card clover",
    "body": [
      "<template>",
      "  <div class=\"h-full\">",
      "    <el-card class=\"h-full\">$0</el-card>",
      "  </div>",
      "</template>",
      "",
      "<script setup lang=\"ts\">",
      "defineOptions({ name: \"$1\" });",
      "</script>",
      "",
      "<style lang=\"less\" scoped>",
      ".el-card {",
      "  #ep.el-card-rounded();",
      "}",
      "</style>"
    ],
    "description": "clover's vue3 template and el-card"
  },
  "export index ts": {
    "scope": "typescript",
    "prefix": "export index ts",
    "body": "export * from \"$1\";$0",
    "description": "export all in ts"
  },
  "import module": {
    "scope": "typescript",
    "prefix": "import module",
    "body": "import { $1 } from \"${2:module}\";$0",
    "description": "import module by name"
  },
  "import module all": {
    "scope": "typescript",
    "prefix": "import all",
    "body": "import * as $1 from \"${2:module}\";$0",
    "description": "import module all and rename"
  },
  "import type": {
    "scope": "typescript",
    "prefix": "import type",
    "body": "import type { $1 } from \"${2:module}\";$0",
    "description": "import type by name"
  },
  "constant": {
    "scope": "typescript",
    "prefix": "constant",
    "body": [
      "/** $1 */",
      "const ${2:CONSTANT_NAME}: Record<${3:CONSTANT_TYPE}, string> = {",
      "  $4: \"$5\",$0",
      "};"
    ],
    "description": "constant by typescript"
  },
  "constant options": {
    "scope": "typescript",
    "prefix": "constant options",
    "body": [
      "const ${1:CONSTANT_NAME}_OPTIONS: Array<ConstantOptions<${2:CONSTANT_TYPE}>> = [",
      "  { value: \"$3\", label: ${1:CONSTANT_NAME}[\"$3\"] },$0",
      "];"
    ],
    "description": "constant options by typescript"
  },
  "fetch api": {
    "scope": "typescript",
    "prefix": "api fetch",
    "body": [
      "export function fetch${1:apiName}($2) {",
      "  return ${3:requestInstence};",
      "}$0"
    ]
  }
}
